
export const subscribeToState = bindSubscriptionState(nextResolveTick)
export default subscribeToState

export function nextResolveTick(cb) :: Promise.resolve().then(cb)

export function bindSubscriptionState(nextTick) ::
  return subscribeToState

  function subscribeToState(target, setCurrent) ::
    let q = null
    const unwind = []
    const kind = Array.isArray(target) ? 'list'
      : 'function' !== typeof target.subscribe
        ? 'hash' : 'one'

    const initial = 'one' === kind
        ? subscribeOne @ target, unwind, resolveNext
        : subscribeMany @ target, unwind, resolveNext

    var tip = initial
    const self = @{} kind, initial, update, unsubscribe, setCurrent
    return self

    function update() ::
      self.setCurrent(tip)

    function unsubscribe() ::
      q = null
      while unwind.length ::
        const unsub = unwind.pop()
        unsub()

    // use promise resolution to debounce updates
    function resolveNext(cur) ::
      if null !== q ::
        q = tip = cur
        return

      q = tip = cur
      nextTick @=> ::
        if null !== q ::
          const tip = q
          q = null
          self.setCurrent(tip)

function subscribeOne(target, unwind, resolveNextTick) ::
  let tip
  unwind.push @
    target.subscribe @ v => ::
      tip = v
      resolveNextTick(tip)

  return tip

function subscribeMany(many, unwind, resolveNextTick) ::
  const tip = Array.isArray(many) ? [] : {}

  for const key of Object.keys(many) ::
    const sub = many[key]

    if null == sub || 'function' !== typeof sub.subscribe ::
      throw new TypeError @ `Subscription "${key}" does not have a subscribe() function`

    unwind.push @
      sub.subscribe @ v => ::
        tip[key] = v
        resolveNextTick(tip)

  return tip
